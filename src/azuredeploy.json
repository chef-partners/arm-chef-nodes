{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {

    "prefix": {
      "type": "string",
      "metadata": {
        "description": "All resources need to be uniquely identified, this prefix will be prepended to all resources. (This does not apply to the storage account)."
      }
    },

    "networkRGName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group that contains the VNet and Subnet to connect to"
      }
    },

    "networkVnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the VNet containing the subnet"
      }
    },

    "networkSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the subnet for the nic to connect to"
      }
    },

   "windowsMachineCount": {
      "type": "int",
      "metadata": {
        "description": "The number of Windows machines to create"
      }
    },

    "linuxMachineCount": {
      "type": "int",
      "metadata": {
        "description": "The number of Linux machines to create"
      }
    },

    "windowsOS": {
      "type": "string",
      "defaultValue": "2016-Datacenter"
    },

    "linuxOS": {
      "type": "string",
      "defaultValue": "18.04-LTS"
    },

    "windowsVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_V2",
      "metadata": {
        "description": "VM size for Windows machines"
      }
    },

    "linuxVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_V2",
      "metadata": {
        "description": "VM size for Windows machines"
      }
    },

    "windowsDataDisks": {
      "type": "array",
      "metadata":{
        "description": "Set an array of the sizes of data disks that need to be applied to the Windows machine"
      },
      "defaultValue": []
    },

    "linuxDataDisks": {
      "type": "array",
      "metadata":{
        "description": "Set an array of the sizes of data disks that need to be applied to the Linux machine"
      },
      "defaultValue": []
    },

    "osAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the user to create in the OS"
      },
      "defaultValue": "azure"
    },

    "osAccountPassword": {
      "type": "string",
      "metadata": {
        "description": "Password to be associated with the user specified"
      }
    },

    "osAccountSSHKeys": {
      "type": "array",
      "metadata": {
        "description": "SSH keys to be associated with the user. This only applies to Linux machines"
      },
      "defaultValue": []
    },

    "chefServerUrl": {
      "type": "string",
      "metadata": {
        "description": "URL for the chef server to register against"
      },
      "defaultValue": ""
    },

    "chefValidatorName": {
      "type": "string",
      "metadata": {
        "description": "Name of the validator key"
      },
      "defaultValue": ""
    },

    "chefRunlistLinux": {
      "type": "string",
      "metadata": {
        "description": "Runlist to apply to the Linux machines"
      },
      "defaultValue": ""
    },

    "chefRunlistWindows": {
      "type": "string",
      "metadata": {
        "description": "Runlist to apply to the Windows machines"
      },
      "defaultValue": ""
    },    

    "chefNodeSSLVerifyMode": {
      "type": "string",
      "metadata": {
        "description": "State if the mode for SSL verification"
      },
      "allowedValues": [
        "peer",
        "none"
      ],
      "defaultValue": "peer"
    },

    "chefEnvironment": {
      "type": "string",
      "metadata": {
        "description": "Environment that the machines should be added to"
      },
      "defaultValue": "_default"
    },

    "chefClientConfiguration": {
      "type": "securestring",
      "metadata": {
        "description": "Additional Client configuration to be applied to the Chef extension"
      },
      "defaultValue": ""
    },

    "chefValidatorKey": {
      "type": "securestring",
      "metadata": {
        "description": "The key for the named validator encoded in Base64"
      },
      "defaultValue": ""
    },

    "chefClientVersion": {
      "type": "string",
      "metadata": {
        "description": "The version of Chef client to install"
      },
      "defaultValue": "14.11.21"
    },

    "enableBootDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "State if boot diagnostics are to be enabled on the machines. If not enabled then no storage account will be created. Default is `false`."
      }
    },

    "enablePublicIPAddress": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "State if the machines should be give a Public IP address or not. Default is `true`"
      }
    },

    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources created by this template"
      }
    },

    "uniqueShort": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {

    "unique": "[uniqueString(subscription().subscriptionId, resourceGroup().id, deployment().name, parameters('prefix'))]",
    "uniqueShort": "[if(empty(parameters('uniqueShort')), substring(variables('unique'), 0, 4), parameters('uniqueShort'))]",

    "location": "[parameters('location')]",

    "ref": {
      "subnet": "[resourceId(parameters('networkRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('networkVnetName'), parameters('networkSubnetName'))]"
    },

    "name": {
      "sa": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-SA')]",
      "storageAccount": "[variables('unique')]",

      "vm": {
        "windows": {
          "name": "[concat(parameters('prefix'), '-win-', variables('uniqueShort'))]",
          "computerName": "[concat(parameters('prefix'), '-win-', variables('uniqueShort'))]"
        },
        "linux": {
          "name": "[concat(parameters('prefix'), '-lin-', variables('uniqueShort'))]",
          "computerName": "[concat(parameters('prefix'), '-lin-', variables('uniqueShort'))]"
        }        
      }
    },

    "settings": {
      "bootDiagnostics": "[parameters('enableBootDiagnostics')]",
      "pip": "[parameters('enablePublicIPAddress')]",
      "subnetRef": "[variables('ref').subnet]",
      "account": {
        "username": "[parameters('osAccountName')]",
        "password": "[parameters('osAccountPassword')]",
        "sshPublicKeys": "[parameters('osAccountSSHKeys')]"
      },
      "chef": {
        "serverUrl": "[parameters('chefServerUrl')]",
        "validatorName": "[parameters('chefValidatorName')]",
        "validatorKey": "[parameters('chefValidatorKey')]",
        "nodeSSLVerifyMode": "[parameters('chefNodeSSLVerifyMode')]",
        "environment": "[parameters('chefEnvironment')]",
        "clientConfiguration": "[parameters('chefClientConfiguration')]",
        "version": "[parameters('chefClientVersion')]"
      }
    },
    
    "settingsWindows": {
      "count": "[parameters('windowsMachineCount')]",
      "sku": "[parameters('windowsOS')]",
      "vmSize": "[parameters('windowsVMSize')]",
      "dataDisks": "[parameters('windowsDataDisks')]",
      "chefRunList": "[parameters('chefRunlistWindows')]"
    },

    "settingsLinux": {
      "count": "[parameters('linuxMachineCount')]",
      "sku": "[parameters('linuxOS')]",
      "vmSize": "[parameters('linuxVMSize')]",
      "dataDisks": "[parameters('linuxDataDisks')]",
      "chefRunList": "[parameters('chefRunlistLinux')]"
    },

    "baseUrl": "[uri(deployment().properties.templateLink.uri, '.')]",
    "urls": {
      "storageAccount": "[concat(variables('baseUrl'), 'nested/storage-account.json')]",
      "vm": "[concat(variables('baseUrl'), 'nested/virtual-machine.json')]",
      "pip": "[concat(variables('baseUrl'), 'nested/public-ipaddress.json')]",
      "nic": "[concat(variables('baseUrl'), 'nested/network-interface.json')]",
      "subnetRef": "[variables('ref').subnet]",
      "platform": {
        "windows": "[concat(variables('baseUrl'), 'nested/vm-windows.json')]",
        "linux": "[concat(variables('baseUrl'), 'nested/vm-linux.json')]"
      },
      "extension": {
        "chef": "[concat(variables('baseUrl'), 'nested/chef-extension.json')]"
      }
    },

    "apiVersions": {
      "deployments": "2017-05-10"
    },

    "tags": {
      "provider": "2680257b-9f22-4261-b1ef-72412d367a68"
    }

  },
  "resources": [

    {
      "type": "Microsoft.Resources/deployments",
      "name": "[concat(variables('name').sa, '-Deployment')]",
      "apiVersion": "[variables('apiVersions').deployments]",
      "condition": "[variables('settings').bootDiagnostics]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
            "uri": "[variables('urls').storageAccount]",
            "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "storageAccountName": {
            "value": "[variables('name').storageAccount]"
          }
        }
      }
    },

    {
      "type": "Microsoft.Resources/deployments",
      "name": "[concat(variables('name').vm.linux.name, '-', copyIndex(1), '-Deployment')]",
      "apiVersion": "[variables('apiVersions').deployments]",
      "condition": "[greater(variables('settingsLinux').count, 0)]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]"
      ],
      "copy": {
        "name": "vmLinuxCopy",
        "count": "[variables('settingsLinux').count]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('urls').vm]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "name": {
            "value": "[concat(variables('name').vm.linux.computerName, '-', copyIndex(1))]"
          },
          "settings": {
            "value": "[union(variables('settings'), variables('settingsLinux'))]"
          },
          "saName": {
            "value": "[variables('name').storageAccount]"
          },
          "platform": {
            "value": "linux"
          },
          "urls": {
            "value": "[variables('urls')]"
          }
        }
      }
    },

    {
      "type": "Microsoft.Resources/deployments",
      "name": "[concat(variables('name').vm.windows.name, '-', copyIndex(1), '-Deployment')]",
      "apiVersion": "[variables('apiVersions').deployments]",
      "condition": "[greater(variables('settingsWindows').count, 0)]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]"
      ],
      "copy": {
        "name": "vmLinuxCopy",
        "count": "[variables('settingsWindows').count]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('urls').vm]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "name": {
            "value": "[concat(variables('name').vm.windows.computerName, '-', copyIndex(1))]"
          },
          "settings": {
            "value": "[union(variables('settings'), variables('settingsWindows'))]"
          },
          "saName": {
            "value": "[variables('name').storageAccount]"
          },
          "platform": {
            "value": "windows"
          },
          "urls": {
            "value": "[variables('urls')]"
          }
        }
      }
    }    



  ],
  "outputs": {

  }
}
